C51 COMPILER V9.59.0.0   PWM                                                               03/21/2019 11:35:22 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\PWM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LIB\PWM.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\HARDWARE;.\LIB) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\PWM.lst) TABS(2) OBJECT(.\Objects\PWM.obj)

line level    source

   1          #include "STC15.h"
   2          #include "PWM.h"
   3          #include "IO.h"
   4          int lastDutyPWM3 = -1;
   5          int lastDutyPWM4 = -1;
   6          int lastDutyPWM5 = -1;
   7          int lastDutyPWM6 = -1;
   8          
   9          //Enable PWM2 et PWM3
  10          
  11          void PWM_Init()
  12          {
  13   1        //IO P-P Registers Setup
  14   1      //  pinMode(3, 7, OUTPUT_PP); 
  15   1        pinMode(2, 1, OUTPUT_PP); 
  16   1        pinMode(2, 2, OUTPUT_PP); 
  17   1        pinMode(2, 3, OUTPUT_PP); 
  18   1        pinMode(0, 7, OUTPUT_PP);
  19   1        P0M0 &=~0xc0;
  20   1        P0M1 &=~0xc0;
  21   1        P0&=~0xc0;
  22   1        P2M0 &=~0x0e;
  23   1        P2M1 &=~0x0e;
  24   1        P2&=~0x0e;
  25   1        P3M0 &=~0x80;
  26   1        P3M1 &=~0x80;
  27   1        P3&=~0x80;
  28   1        //PWM Registers Setup
  29   1        P_SW2 |= 0x80;
  30   1        PWMCFG = 0x00;
  31   1        PWMCKS = 0x0f; //of 
  32   1        PWMC = PWM_CYCLE;
  33   1      //  PWM2CR = 0x00;
  34   1      // PWM6CR|=(1<<3);
  35   1      //  PWM2T1 = 0x0000;
  36   1      //  PWM2T2 = 0x0001;
  37   1        PWM3CR = 0x00;
  38   1        PWM4CR = 0x00;
  39   1        PWM5CR = 0x00;
  40   1        PWM6CR = 0x08;
  41   1        PWM3T1 = 0x0000;
  42   1        PWM3T2 = 0x0001;
  43   1      
  44   1        PWM4T1 = 0x0000;  
  45   1        PWM4T2 = 0x0001;
  46   1        
  47   1        PWM5T1 = 0x0000;
  48   1        PWM5T2 = 0x0001;
  49   1        
  50   1        PWM6T1 = 0x0000;
  51   1        PWM6T2 = 0x0001;
  52   1        PWMCR = 0x3f; //-316
  53   1        PWMCR |= 0x80;
  54   1        P_SW2 &= ~0x80;
C51 COMPILER V9.59.0.0   PWM                                                               03/21/2019 11:35:22 PAGE 2   

  55   1        //Reset lastDuty Value
  56   1      //  lastDutyPWM2 = -1;
  57   1        lastDutyPWM3 = -1;
  58   1        lastDutyPWM4 = -1;
  59   1        lastDutyPWM5 = -1;
  60   1        lastDutyPWM6 = -1;
  61   1      
  62   1      
  63   1      
  64   1      }
  65          
  66          //PWM2 Duty Control
  67          /*void PWM2_Output(unsigned int duty)
  68          {
  69            if(duty == lastDutyPWM2)return;
  70            if(duty == PWM_DUTY_MIN || duty == PWM_DUTY_MAX)
  71            {
  72              PWMCR &= ~0x01;
  73              PWM2 = duty == PWM_DUTY_MAX;
  74            }
  75            else
  76            {
  77              P_SW2 |= 0x80;
  78              PWM2T1 = 0x00;
  79              PWM2T2 = duty * PWM_CYCLE / 100;
  80              P_SW2 &= ~0x80;
  81              PWMCR |= 0x01;
  82            }
  83            lastDutyPWM2 = duty;
  84          }
  85          */
  86          
  87          //PWM3 Duty Control
  88          void PWM3_Output(unsigned int duty)
  89          {
  90   1        if(duty == lastDutyPWM3)return;
  91   1        if(duty == PWM_DUTY_MIN || duty == PWM_DUTY_MAX)
  92   1        {
  93   2          PWMCR &= ~0x02;
  94   2          PWM3 = duty == PWM_DUTY_MAX; 
  95   2        }
  96   1        else
  97   1        {
  98   2          P_SW2 |= 0x80;
  99   2          PWM3T1 = 0x00;
 100   2          PWM3T2 = duty * PWM_CYCLE / 100;
 101   2          P_SW2 &= ~0x80;
 102   2          PWMCR |= 0x02;
 103   2      
 104   2        }
 105   1        lastDutyPWM3 = duty;
 106   1      
 107   1      }
 108          //PWM4 Duty Control
 109          void PWM4_Output(unsigned int duty)
 110          {
 111   1        if(duty == lastDutyPWM4)return;
 112   1        if(duty == PWM_DUTY_MIN || duty == PWM_DUTY_MAX)
 113   1        {
 114   2          PWMCR &= ~0x04;
 115   2          PWM4 = duty == PWM_DUTY_MAX; 
 116   2        }
C51 COMPILER V9.59.0.0   PWM                                                               03/21/2019 11:35:22 PAGE 3   

 117   1        else
 118   1        {
 119   2          P_SW2 |= 0x80;
 120   2          PWM4T1 = 0x00;
 121   2          PWM4T2 = duty * PWM_CYCLE / 100;
 122   2          P_SW2 &= ~0x80;
 123   2          PWMCR |= 0x04;
 124   2        }
 125   1        lastDutyPWM4 = duty;
 126   1      }
 127          //PWM5 Duty Control
 128          void PWM5_Output(unsigned int duty)
 129          {
 130   1        if(duty == lastDutyPWM5)return;
 131   1        if(duty == PWM_DUTY_MIN || duty == PWM_DUTY_MAX)
 132   1        {
 133   2          PWMCR &= ~0x08;
 134   2          PWM5 = duty == PWM_DUTY_MAX; 
 135   2        }
 136   1        else
 137   1        {
 138   2          P_SW2 |= 0x80;
 139   2          PWM5T1 = 0x00;
 140   2          PWM5T2 = duty * PWM_CYCLE / 100;
 141   2          P_SW2 &= ~0x80;
 142   2          PWMCR |= 0x08;
 143   2        }
 144   1        lastDutyPWM5 = duty;
 145   1      }
 146          //PWM6 Duty Control
 147          void PWM6_Output(unsigned int duty)
 148          {
 149   1        
 150   1        if(duty == lastDutyPWM6)return;
 151   1        if(duty == PWM_DUTY_MIN || duty == PWM_DUTY_MAX)
 152   1        {
 153   2          PWMCR &= ~0x10;
 154   2          PWM6 = duty == PWM_DUTY_MAX; 
 155   2        }
 156   1        else
 157   1        {
 158   2          P_SW2 |= 0x80;
 159   2          PWM6T1 = 0x00;
 160   2          PWM6T2 = duty * PWM_CYCLE / 100;//
 161   2          P_SW2 &= ~0x80;
 162   2          PWMCR |= 0x10;
 163   2        }
 164   1        lastDutyPWM6 = duty;
 165   1      //  PWMCR|=(unsigned char)(1<<7);//开启PWM计数; //此句记得放最后
 166   1      }
 167          
 168          //Dispose PWM Function
 169          /*void PWM_Dispose()
 170          {
 171            P_SW2 |= 0x80;
 172            PWMCR = 0x00;
 173            P_SW2 &= ~0x80;
 174            PWM2 = PWM3 = 0;
 175          }
 176          */


C51 COMPILER V9.59.0.0   PWM                                                               03/21/2019 11:35:22 PAGE 4   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    674    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
